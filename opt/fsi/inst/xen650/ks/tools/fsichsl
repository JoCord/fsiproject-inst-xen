#!/bin/sh
#
#   change syslog
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
newsyslogsrv="none"
quietmode=""
xs=1
sc=1
remcfg=1
restartsyslog=1
printsyslog=1
sysfile="/etc/syslog.conf"

ver="1.0.5 - 19.8.2016"
retc=0
ls="  "
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
while [ -h "$SOURCE" ]; do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
if [ -z $fsifunc ]; then export fsifunc="/usr/bin/fsifunc.sh"; fi
if [ -f $fsifunc ]; then
   . $fsifunc
   . $fsivars
else
   echo "ERROR cannot load fsi functions $fsifunc"
   exit 99
fi
if [ -z $logfile ]; then logfile=$fsidir"/"$progname".log"; fi

help() {
   echo
   echo " Help for $progname - $ver"    
   echo
   echo " change syslog settings"
   echo
   echo "  Parameter:"
   echo "   -x                 xenserver logging destination"
   echo "   -s                 /etc/syslog.conf config"
   echo
   echo "   -d <server>        destination for xenserver or/and syslog"
   echo "   -r                 remove config"
   echo "   -n                 do not restart syslog daemon"
   echo "   -p                 only print syslog.conf and destination"
   echo
   echo "  Optional Parameter:"
   echo "   -q                 quiet mode"
   echo "   -0                 info mode"
   echo "   -1                 debug mode"
   echo "   -2                 trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   echo "  Return Code:"
   echo "    1 = help"
   echo "    > = different meaning"
   echo
   echo "  Example:"
   echo "    $progname -x -r"
   echo "    $progname -x -s -d 172.16.1.6"
   echo
}


while getopts ":xspnrd:l:hq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "r")
         remcfg=0
        ;;
      "n")
         restartsyslog=0
        ;;
      "p")
         printsyslog=0
        ;;
      "x")
         xs=0
        ;;
      "s")
         sc=0
        ;;
      "d")
         newsyslogsrv="$OPTARG"
         debmsg " new syslog: $newsyslogsrv"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done

if [ $xs -eq 1 ] && [ $sc -eq 1 ] && [ $remcfg -eq 1 ] && [ $printsyslog -eq 1 ] && [ "$newsyslogsrv" == "none" ]; then
   help
   exit 1
fi   
   
if [ $printsyslog -ne 0 ]; then   
   if [ $xs -eq 1 ] && [ $sc -eq 1 ]; then
      echo "No target config (-x or -s) given - abort"
      help
      exit 1
   fi
   
   if [ $remcfg -eq 1 ] && [ "$newsyslogsrv" == "none" ]; then
      echo "Do not know what to do - either remove (-r) or destination (-d) given."
      help
      exit 1
   fi
fi
   
infmsg "$ls Change Syslog Settings v.$ver"

if [ $printsyslog -eq 0 ]; then
   syslog_destination=$(2>&1 xe host-param-get param-name=logging param-key=syslog_destination uuid=$(xe host-list name-label=$(hostname -s) --minimal) )
   found=$?
   if [ $found -eq 0 ]; then
      infmsg "$ls  syslog destination: $syslog_destination"
   else
      warnmsg "$ls  syslog destination not defined"
   fi
   OUTPUT=$(2>&1 grep -i '@' /etc/syslog.conf)
   found=$?
   if [ $found -eq 0 ]; then
      infmsg "$ls  syslog config forwards:"
      OLD_IFS=$IFS
      IFS=$'\n'
      for i in $OUTPUT; do
         infmsg "$ls    $i"
      done
   else
      warnmsg "$ls  no forwarder found in syslog.conf"
   fi
else
   if [ "$newsyslogsrv" != "none" ]; then
      infmsg "$ls  set syslog parameter to [$newsyslogsrv]"
      if [ $xs -eq 0 ]; then
         infmsg "$ls  -> xenserver syslog destination"
         cmd="xe host-param-set uuid=$(xe host-list name-label=$(hostname -s) --minimal) logging:syslog_destination=$newsyslogsrv"
         tracemsg "$ls  cmd: $cmd"
         OUTPUT=$(2>&1 $cmd)
         if [ $? -ne 0 ]; then
            errmsg "cannot set syslog $OUTPUT - abort"
            retc=99
         else
            infmsg "$ls  syslog set ok"
         fi
         if [ $retc -eq 0 ]; then
            infmsg "$ls  reconfigure host"
            cmd="xe host-syslog-reconfigure host-uuid=$(xe host-list name-label=$(hostname -s) --minimal)"
            tracemsg "$ls  cmd: $cmd"
            OUTPUT=$(2>&1 $cmd)
            if [ $? -ne 0 ]; then
               errmsg "cannot reconfigure syslog $OUTPUT - abort"
               retc=1
            else
               infmsg "$ls  syslog reconfigured ok"
            fi
         fi
      fi
      if [ $sc -eq 0 ]; then
         slinfo=(
            local7.info
            local6.info
            local5.info
            local4.info
            local3.info
            local2.info
            local1.info
            daemon.notice
            cron.notice
            auth.info
            mail.info
            user.info
            kern.notice
         )
   
         infmsg "$ls  -> syslog.conf config change or add"
         for ((i=0; i<${#slinfo[*]}; i++)); do
            OUTPUT=$(2>&1 grep "${slinfo[$i]}" $sysfile)
            found=$?
            tracemsg "$ls  found: $found"
            if [ $found -eq 0 ]; then
               infmsg "$ls  found ${slinfo[$i]} - change"
               cmd="sed -i '/${slinfo[$i]}/ s/.*/${slinfo[$i]} \@${newsyslogsrv}/' $sysfile "
               tracemsg "$ls  cmd: $cmd"
               OUTPUT=$(2>&1 sed -i "/${slinfo[$i]}/ s/.*/${slinfo[$i]} \@${newsyslogsrv}/" $sysfile)
               if [ $? -ne 0 ]; then
                 errmsg "cannot change ${slinfo[$i]} [ $OUTPUT ]"
                 retc=99
                 break
               fi
            else
               infmsg "$ls  no ${slinfo[$i]} config found - add new"
               OUTPUT=$(2>&1 echo "${slinfo[$i]} @$newsyslogsrv" >>$sysfile )
               if [ $? -ne 0 ]; then
                 errmsg "cannot add ${slinfo[$i]} [ $OUTPUT ]"
                 retc=99
                 break
               fi
            fi
         done
      fi   
      
      if [ $retc -eq 0 ]; then
         if [ $restartsyslog -eq 1 ]; then
            infmsg "$ls  restart syslog daemon"
            cmd='service syslog restart'
            tracemsg "$ls  cmd: $cmd"
            OUTPUT=$(2>&1 $cmd)
            if [ $retc -ne 0 ]; then
               errmsg "cannot restart syslog daemon"
            else
               infmsg "$ls  syslog restarted"
            fi
         fi
      fi
   
      if [ $retc -eq 0 ]; then
         infmsg "$ls  change syslogsrv in $fsivars"
         change_param "syslogsrv" $newsyslogsrv $fsivars
         retc=$?
         if [ $retc -ne 0 ]; then
           errmsg "cannot change $fsivars [ $OUTPUT ]"
         fi
      fi
      
   else
      infmsg "$ls  remove syslog config"
      if [ $xs -eq 0 ]; then
         infmsg "$ls  -> xenserver syslog destination"
         cmd="xe host-param-clear uuid=$(xe host-list name-label=$(hostname -s) --minimal) param-name=logging"
         tracemsg "$ls  cmd: $cmd"
         OUTPUT=$(2>&1 $cmd)
         retc=$?
         if [ $retc -ne 0 ]; then
            errmsg "cannot remove syslog destination configure [$OUTPUT]"
         else
            infmsg "$ls  syslog destination disabled"
         fi      
         if [ $retc -eq 0 ]; then
            infmsg "$ls  reconfigure host"
            cmd="xe host-syslog-reconfigure host-uuid=$(xe host-list name-label=$(hostname -s) --minimal)"
            tracemsg "$ls  cmd: $cmd"
            OUTPUT=$(2>&1 $cmd)
            if [ $? -ne 0 ]; then
               errmsg "cannot reconfigure syslog $OUTPUT - abort"
               retc=1
            else
               infmsg "$ls  syslog reconfigured ok"
            fi
         fi
      fi
      if [ $sc -eq 0 ]; then
         infmsg "$ls  -> syslog.conf config remove"
         cmd='sed -i /@/d '$sysfile
         tracemsg "$ls  cmd: $cmd"
         OUTPUT=$(2>&1 $cmd)
         retc=$?
         if [ $retc -ne 0 ]; then
            errmsg "cannot remove syslog.conf remote syslog configure [$OUTPUT]"
         else
            infmsg "$ls  syslog.conf adjusted"
            if [ $restartsyslog -eq 1 ]; then
               infmsg "$ls  restart syslog daemon"
               cmd='service syslog restart'
               tracemsg "$ls  cmd: $cmd"
               OUTPUT=$(2>&1 $cmd)
               if [ $retc -ne 0 ]; then
                  errmsg "cannot restart syslog daemon"
               else
                  infmsg "$ls  syslog restarted"
               fi
            fi
         fi      
      fi   
      if [ $retc -eq 0 ]; then
         infmsg "$ls  change syslogsrv in $fsivars"
         change_param "syslogsrv" "none" $fsivars
         retc=$?
         if [ $retc -ne 0 ]; then
           errmsg "cannot change $fsivars [ $OUTPUT ]"
         fi
      fi
   fi
fi

infmsg "  End syslog config rc=$retc"
exit $retc  
   
