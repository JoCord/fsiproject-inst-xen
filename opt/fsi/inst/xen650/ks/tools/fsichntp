#!/bin/sh
#
#   change ntp
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
newntp="none"
addntp="none"
printntp=1
quietmode=""
ntpfirst=1

ver="1.0.3 - 02.03.2017"
retc=0
ls="  "
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
while [ -h "$SOURCE" ]; do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
if [ -z $fsifunc ]; then export fsifunc="/usr/bin/fsifunc.sh"; fi
if [ -f $fsifunc ]; then
   . $fsifunc
   . $fsivars
else
   echo "ERROR cannot load fsi functions $fsifunc"
   exit 99
fi
if [ -z $logfile ]; then logfile=$fsidir"/"$progname".log"; fi

help() {
   echo
   echo " Help for $progname - $ver"    
   echo
   echo " change ntp servers"
   echo
   echo "  Parameter:"
   echo "   -n <ntp>[,<ntp>]   rewrite all ntp configs with this server(s)"
   echo "   -a <ntp>           only add this ntp server (default=at the end)"
   echo "   -f                 if -a add ntp server as first entry"
   echo
   echo "   -p                 print actual ntp server"
   echo
   echo "  Optional Parameter:"
   echo "   -q                 quiet mode"
   echo "   -0                 info mode"
   echo "   -1                 debug mode"
   echo "   -2                 trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   echo "  Return Code:"
   echo "    1 = help"
   echo "    > = different meaning"
   echo
   echo "  Example:"
   echo "    $progname -a ntp.lab.local -f"
   echo "    $progname -n 10.10.10.1,10.10.10.2"
   echo
}

while getopts ":n:a:fpl:hq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         tracemsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         tracemsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         tracemsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         tracemsg " log: $logfile"
        ;;
      "p")
         printntp=0
        ;;
      "f")
         ntpfirst=0
        ;;
      "a")
         addntp="$OPTARG"
         tracemsg " add ntp: $addntp"
        ;;
      "n")
         newntp="$OPTARG"
         tracemsg " new ntp: $newntp"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done

if [ "$addntp" == "none" ] && [ "$newntp" == "none" ] && [ $printntp -eq 1 ]; then
   help
   exit 1
fi   

if [ "$addntp" != "none" ] && [ "$newntp" != "none" ]; then
   echo "Only -n or -a parameter useful at once - abort"
   help
   exit 1
fi

ntpconf="/etc/ntp.conf"

infmsg "${ls}Change NTP Server v.$ver"

if [ $printntp -eq 0 ]; then
   infmsg "$ls  print actual xenserver ntp server"
   OUTPUT=$(2>&1 grep -i 'server' $ntpconf)
   found=$?
   if [ $found -eq 0 ]; then
      infmsg "$ls   ntp server:"
      OLD_IFS=$IFS
      IFS=$'\n'
      for i in $OUTPUT; do
         infmsg "$ls    $i"
      done
      IFS=$OLD_IFS
   else
      warnmsg "$ls  no ntp server found in $ntpconf"
   fi
elif [ "$addntp" != "none" ]; then
   infmsg "$ls  add [$addntp] to existing ntp server list"
   
   if [[ "$addntp" =~ $regex_ip_dns ]]; then
      if [ $ntpfirst -eq 0 ]; then
         infmsg "$ls   add ntp at the beginning of the ntp config"
         echo "server $addntp" >${ntpconf}.temp
         retc=$?
         if [ $retc -ne 0 ]; then
            errmsg "cannot create new file with ntp srv in ${ntpconf}.temp - abort"
         else
            tracemsg "$ls   copy ntp server to temp config file"
            out=$(/bin/cat ${ntpconf} >>${ntpconf}.temp)
            retc=$?
            if [ $retc -ne 0 ]; then
               errmsg "cannot add old ntp conf to temp ${ntpconf}.temp - abort"
            else
               tracemsg "$ls   delete old ntp conf file"
               out=$(/bin/rm -f ${ntpconf})
               retc=$?
               if [ $retc -ne 0 ]; then
                  errmsg "cannot delete old ${ntpconf} - abort"
                  errmsg "output [$out]"
               else
                  tracemsg "$ls   rename temp file in org config file"
                  out=$(/bin/mv -f ${ntpconf}.temp ${ntpconf})
                  retc=$?
                  if [ $retc -ne 0 ]; then
                     errmsg "cannot rename old to org ${ntpconf} - abort"
                     errmsg "output [$out]"
                  fi
               fi
            fi
         fi
      else 
         infmsg "$ls   add ntp at the end of the ntp config"
         echo "server $addntp" >>$ntpconf
         retc=$?
         if [ $retc -ne 0 ]; then
            errmsg "cannot add ntp srv ${addntp} to $ntpconf - abort"
         fi
      fi
   else
      errmsg "no correct ip or dns [$addntp]"
      retc=88
   fi
elif [ "$newdns" != "none" ]; then
   infmsg "$ls  rewrite [$newntp] ntp server list"

   infmsg "${ls} delete first all server entries"
   out=$(sed -i -e '/127.127.1.0/n;/server.*/d' $ntpconf)
   retc=$?
   
   if [ $retc -ne 0 ]; then
      errmsg "cannot delete old entries in $ntpconf"
   else
      OLD_IFS=$IFS
      IFS=$','
      for i in $newntp; do
         if [[ "$i" =~ $regex_ip_dns ]]; then
            infmsg "${ls} add ntp server [$i]"
            echo "server ${i}" >>$ntpconf
            retc=$?
            if [ $retc -ne 0 ]; then
               errmsg "cannot add ntp srv ${newntpsrv[$i]} to $ntpconf - abort"
               break
            fi
         else
            errmsg "no correct ip or dns [$i] - ignore"
         fi
      done 
      IFS=$OLD_IFS
   fi

else
   errmsg "something wrong"
   retc=99
fi

infmsg "  End NTP change rc=$retc"
exit $retc  
