#!/bin/sh
#
#   change dns
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
newdns="none"
adddns="none"
printdns=1
quietmode=""
dnsfirst=1

ver="1.0.7 - 1.8.2016"
retc=0
ls="  "
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
while [ -h "$SOURCE" ]; do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
if [ -z $fsifunc ]; then export fsifunc="/usr/bin/fsifunc.sh"; fi
if [ -f $fsifunc ]; then
   . $fsifunc
   . $fsivars
else
   echo "ERROR cannot load fsi functions $fsifunc"
   exit 99
fi
if [ -z $logfile ]; then logfile=$fsidir"/"$progname".log"; fi

help() {
   echo
   echo " Help for $progname - $ver"    
   echo
   echo " change dns servers entries"
   echo
   echo "  Parameter:"
   echo "   -d <dns>[,<dns>]   rewrite all dns configs with this server(s)"
   echo "   -a <dns>           only add this dns server (default=at the end)"
   echo "   -f                 if -a add dns server as first entry"
   echo
   echo "   -p                 print actual dns config"
   echo
   echo "  Optional Parameter:"
   echo "   -q                 quiet mode"
   echo "   -0                 info mode"
   echo "   -1                 debug mode"
   echo "   -2                 trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   echo "  Return Code:"
   echo "    1 = help"
   echo "    > = different meaning"
   echo
   echo "  Example:"
   echo "    $progname -a 172.16.1.4 -f"
   echo "    $progname -d 172,16.1.1,172.16.1.4,172.16.16"
   echo
}

while getopts ":fpd:a:l:hq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         tracemsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         tracemsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         tracemsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         tracemsg " log: $logfile"
        ;;
      "p")
         printdns=0
        ;;
      "f")
         dnsfirst=0
        ;;
      "a")
         adddns="$OPTARG"
         tracemsg " add dns: $adddns"
        ;;
      "d")
         newdns="$OPTARG"
         tracemsg " new dns: $newdns"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done


if [ "$adddns" == "none" ] && [ "$newdns" == "none" ] && [ $printdns -eq 1 ]; then
   help
   exit 1
fi   

if [ "$adddns" != "none" ] && [ "$newdns" != "none" ]; then
   echo "Only -d or -a parameter useful at once - abort"
   help
   exit 1
fi
   
get_srvmgmtdata() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "
   
   srvMgmtLabel=$(xe pif-list params=network-name-label  management=true host-uuid=$(xe host-list params=uuid name-label=$(hostname -s) --minimal) --minimal)
   
   if [ "$srvMgmtLabel" == "" ]; then
      errmsg "cannot find managment network label"
      retc=79
   fi

   if [ $retc -eq 0 ]; then
      debmsg "$ls   get server ip"
      srvIP=$(xe pif-list network-name-label="$srvMgmtLabel" params=IP host-uuid=$(xe host-list name-label=$(hostname -s) --minimal) --minimal) 
      if [ "$srvIP" == "" ]; then
         errmsg "cannot find mgmt server ip"
         retc=78
      fi
   fi
   if [ $retc -eq 0 ]; then
      debmsg "$ls   get server netmask"
      srvNM=$(xe pif-list network-name-label="$srvMgmtLabel" params=netmask host-uuid=$(xe host-list name-label=$(hostname -s) --minimal) --minimal)
      if [ "$srvNM" == "" ]; then
         errmsg "cannot find mgmt server netmask"
         retc=77
      fi
   fi
   if [ $retc -eq 0 ]; then
      debmsg "$ls   get server gateway"
      srvGW=$(xe pif-list network-name-label="$srvMgmtLabel" params=gateway host-uuid=$(xe host-list name-label=$(hostname -s) --minimal) --minimal)
      if [ "$srvGW" == "" ]; then
         errmsg "cannot find mgmt server gateway"
         retc=76
      fi
   fi
   if [ $retc -eq 0 ]; then
      debmsg "$ls   get server mgmt pif"
      srvMgmtPIF=$(xe pif-list network-name-label="$srvMgmtLabel" params=uuid host-uuid=$(xe host-list name-label=$(hostname -s) --minimal) --minimal)
      if [ "$srvMgmtPIF" == "" ]; then
         errmsg "cannot find mgmt server pif"
         retc=75
      fi
   fi
   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}

set_dns() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "
   local dnssrv=$1
   local haon=1                     

   if [ "$dnssrv" == "" ]; then
      errmsg "no dns server(s) given - abort"
   else
      infmsg "$ls  get server mgmt datas"
      get_srvmgmtdata
      retc=$?
      if [ $retc -ne 0 ]; then
         errmsg "cannot get all mgmt data to change dns - abort"
      fi
      
      OUTPUT=$(2>&1 fsichha -l $logfile -c )
      haon=$?
      
      if [ $haon -eq 0 ]; then
         infmsg "$ls  ha is on - first deactivate ha"
         OUTPUT=$(2>&1 fsichha -l $logfile -d )
         retc=$?
      fi

      if [ $retc -eq 0 ]; then
         infmsg "$ls  reconfigure dns now"
         OUTPUT=$(2>&1 xe pif-reconfigure-ip mode=static IP=$srvIP netmask=$srvNM gateway=$srvGW uuid=$srvMgmtPIF DNS=$dnssrv)
         retc=$?
         if [ $retc -ne 0 ]; then
            if [ $retc -eq 1 ]; then
               if [[ "$OUTPUT" =~ ".*Lost connection to the server.*" ]]; then
                  infmsg "$ls  lost connection but set dns successful"
                  retc=0
               else
                  errmsg "unknown error - cannot reconfigure dsn [$OUTPUT]"
               fi
            else
               errmsg "cannot reconfigure dns [$OUTPUT]"
            fi
         fi
      fi

      if [ $haon -eq 0 ]; then
         infmsg "$ls  ha was on - reactivate ha"
         OUTPUT=$(2>&1 fsichha -l $logfile -a )
         retc=$?
      fi
   fi

   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}


infmsg "${ls}Change DNS Settings v.$ver"
srvMgmtLabel=""
srvIP=""
srvNM=""
srvMgmtPIF=""
srvGW=""

if [ $printdns -eq 0 ]; then
   infmsg "$ls  print actual xenserver dns config"
   dnsoldsrv=$(xe pif-list network-name-label="$(xe pif-list params=network-name-label  management=true host-uuid=$(xe host-list params=uuid name-label=$(hostname -s) --minimal) --minimal)" params=DNS host-uuid=$(xe host-list name-label=$(hostname -s) --minimal) --minimal | tr "\\\," "\n")
   for ip in $dnsoldsrv; do
      tracemsg "$ls   ip: $ip"
      if [[ ! $ip =~ $regex_ip ]]; then
         warnmsg "$ls dns: $ip   ==> is not a valid IP address"
      else
         infmsg "$ls  dns: $ip"
         if [ "$quietmode" == " -q " ]; then
            echo -n " $ip"
         fi
      fi
   done
   if [ "$quietmode" == " -q " ]; then
      echo
   fi
   
elif [ "$adddns" != "none" ]; then
   infmsg "$ls  add [$adddns] to existing dns server list"
   
   if [[ ! $adddns =~ $regex_ip ]]; then
      errmsg "[$adddns] is not a valid IP address - abort"
      retc=5
   else
   
      if [ $retc -eq 0 ]; then
         infmsg "$ls  get old dns entries"
         
         dnsoldsrv=$(xe pif-list network-name-label="$(xe pif-list params=network-name-label  management=true host-uuid=$(xe host-list params=uuid name-label=$(hostname -s) --minimal) --minimal)" params=DNS host-uuid=$(xe host-list name-label=$(hostname -s) --minimal) --minimal | tr "\\\," "\n")
   
         if [ $dnsfirst -eq 0 ]; then
            infmsg "$ls   add dns at the beginning of the dns server list"
            newdnssrv=$adddns
         fi
   
         for ip in $dnsoldsrv; do
            tracemsg "$ls   ip: $ip"
            if [[ ! $ip =~ $regex_ip ]]; then
               warnmsg "[$ip] is not a valid IP address - ignore"
            else
               newdnssrv="$newdnssrv,$ip"
            fi
         done
   
         if [ $dnsfirst -eq 1 ]; then
            infmsg "$ls   add dns at the end of the dns server list"
            newdnssrv="$newdnssrv,$adddns"
         fi

         newdnssrv=$(echo $newdnssrv|sed 's/^,//')
         tracemsg "$ls   new dns: $newdnssrv"
      fi
   
      if [ $retc -eq 0 ]; then
         infmsg "$ls  reconfigure dns now"
         set_dns "$newdnssrv"
         retc=$?
      fi
   fi

elif [ "$newdns" != "none" ]; then
   infmsg "$ls  rewrite [$newdns] dns server list"

   newdnssrvs=$(echo $newdns | tr "," "\n")
   newdnssrv=""
   
   for ip in $newdnssrvs; do
      tracemsg "$ls   ip: $ip"
      if [[ ! $ip =~ $regex_ip ]]; then
         warnmsg "[$ip] is not a valid IP address - abort"
         retc=5
         break
      else
         newdnssrv="$newdnssrv,$ip"
      fi
   done
   
   if [ $retc -eq 0 ]; then
      newdnssrv=$(echo $newdnssrv|sed 's/^,//')
      tracemsg "$ls   new dns: $newdnssrv"
   fi
   
   if [ $retc -eq 0 ]; then
      infmsg "$ls  reconfigure dns now"
      set_dns "$newdnssrv"
      retc=$?
   fi
else
   errmsg "something wrong"
   retc=99
fi

infmsg "  End dns config rc=$retc"
exit $retc  
