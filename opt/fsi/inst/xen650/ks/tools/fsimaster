#!/bin/sh
#
#   get master dns or ip or check if still master
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
unmount=0
insttype="none"
flag_poolmaster="none"

ver="1.0.5 - 7.12.2016"
retc=0
ls="  "
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
while [ -h "$SOURCE" ]; do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
if [ -z $fsifunc ]; then export fsifunc="/usr/bin/fsifunc.sh"; fi
if [ -f $fsifunc ]; then
   . $fsifunc
   . $fsivars
else
   echo "ERROR cannot load fsi functions $fsifunc"
   exit 99
fi
if [ -z $logfile ]; then logfile=$fsidir"/"$progname".log"; fi

if [ -z "$1" ] ; then
    echo "ERROR"
    exit 99
fi

if [ "$insttyp" == "none" ]; then
   echo "ERROR - unknown installation type - only master, member and standalone supported"
   retc=99
else   
   case "$1" in
    name) 
       master="none"
       if [ "$insttyp" == "standalone" ]; then
          master=${HOSTNAME%%.*}
          echo $master
          export master=$master
       else
          if [ $retc -eq 0 ] ; then
             OUTPUT=$(2>&1 /usr/bin/fsimount -c)
             retc=$?
             if [ $retc -eq 0 ] ; then
               unmount=0
             elif [ $retc -eq 1 ] ; then
               OUTPUT=$(2>&1 /usr/bin/fsimount -m)
               retc=$?
               if [ $retc -ne 0 ] ; then
                 echo "ERROR - cannot mount fsi deploy server - abort"
                 retc=99
               else
                 unmount=1
               fi
             else 
                echo "ERROR - mounting fsi deploy server - abort"
                retc=98
             fi      
          fi  
            
            
          if [ $retc -eq 0 ] ; then
            if [ -e $flag_poolmaster ]; then
                while read line; do
                    master=$line
                done < "$flag_poolmaster"
                if [ "$master" == "none" ]; then
                    echo "ERROR - read config"
                    retc=97
                else
                    echo $master
                    export master=$master
                fi
            else
                echo "ERROR - connect to pool flag file" 
                retc=96
            fi
          fi
          
          if [ $retc -eq 0 ] && [ $unmount -eq 1 ] ; then
            OUTPUT=$(2>&1 /usr/bin/fsimount -u)
            retc=$?
            if [ $retc -ne 0 ] ; then
              echo "ERROR - cannot unmount fsi deploy server - abort"
              retc=99
            else
              unmount=1
            fi
          fi  
       fi
       ;;
    ip)
       if [ -z "$2" ]; then
           echo "ERROR - empty parameter dns name"
           retc=95
       else
           masterip=`/usr/bin/nslookup $2 | grep Add | grep -v '#' | cut -f 2 -d ' '`
           if [ -z "$masterip" ]; then
             echo "ERROR - getting ip"
             retc=94
           else
             echo $masterip
             export masterip=$masterip
           fi
       fi    
       ;;
    check)
       if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
           echo "ERROR"
           retc=99
       elif [ "$insttyp" == "standalone" ]; then
           echo "OK"
           retc=0
       else
           ip=$2;po=$3;ma=$4
           currmaster=`ssh -q $ip xe pool-list name-label=$po |grep master |awk '{print $4}'`
           shouldmaster=`ssh -a $ip xe host-list name-label=$ma --minimal`
           if [ "$currmaster" == "$shouldmaster" ]; then 
               echo "OK"
               retc=0
           else
               ssh -q $ip xe pool-designate-new-master host-uuid=$shouldmaster         # auf alten master server neuen eintragen ????
               echo "OK"
               retc=0
           fi
       fi
       ;;
    *)
       echo "ERROR - unknown parameter $1"
       retc=99
       ;;
   esac
fi

exit $retc




