#!/bin/sh
#
#   run once in pool
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
# 
flag_pool="none"
flag_poolrun="none"
waittime=30

ver="1.0.10 - 01.02.2017"
retc=0
ls="  "
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]; do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
if [ -z $fsifunc ]; then export fsifunc="/usr/bin/fsifunc.sh"; fi
if [ -f $fsifunc ]; then
   . $fsifunc
   . $fsivars
else
   echo "ERROR cannot load fsi functions $fsifunc"
   exit 99
fi
if [ -z $logfile ]; then logfile=$fsidir"/"$progname".log"; fi


# main ------------------------------------------------------------------------------------------------------------------------------------


if [ "$2" == "sub" ] ; then
    ls="     "
    tracemsg "$ls Pool Coord - Parameter sub detected"
fi

infmsg "$ls pool coord v.$ver"

if [ -z "$1" ]; then
    errmsg "no parameter - do not know what to do"
    retc=99
else
   what=$1
   infmsg "$ls  Parameter: $what"

   if [ $retc -eq 0 ] && [ "$flag_pool" == "none" ] ; then
       errmsg "no pool flag dir given in config"
       retc=99
   else
       infmsg "$ls  flag: $flag_pool"
   fi
   
   if [ $retc -eq 0 ] && [ "$flag_poolrun" == "none" ] ; then
       errmsg "no poolrun flag dir given in config"
       retc=99
   else
       infmsg "$ls  run flag: $flag_poolrun"
   fi
   
   if [ $retc -eq 0 ] ; then
       hostflag=$flag_poolrun"/xenserver"
       tracemsg "$ls hostflag: $hostflag"
       if [ -d $flag_pool ]; then
           if [ "$what" == "check" ]; then
               infmsg "$ls  Test if we can run alone ..."
               echo -n $(date +%H:%M:%S)" INFO   :$ls  Waiting ."
               while ! mkdir $flag_poolrun > /dev/null 2>&1
               do 
                 echo -n "."
                 createdhost=""
                 if [ -f $hostflag ]; then
                   read createdhost < $hostflag
                   if [ $? -eq 0 ]; then
                     if [ $createdhost == $HOSTNAME ] ; then
                       break
                     fi
                   fi
                 fi
                 sleep $waittime
               done
               echo " ok"
               if [ "$createdhost" == "$HOSTNAME" ] ; then
               	infmsg "$ls  I am create hostflag - gon on"
               fi
               tracemsg "$ls  write server to control file"
               
               echo $HOSTNAME >$hostflag
               if [ $? -ne 0 ] ; then
                 errmsg "cannot create host flag in $flag_poolrun"
                 retc=99
               else 
                 tracemsg "$ls  host flag create"
               fi
               
               if [ $retc -eq 0 ]; then
                  tmppool=$(xe pool-list params=name-label --minimal)
                  if [ -z $tmppool ]; then
                     masterip=""
                     debmsg "$ls  check master"               
                     if [ $retc -eq 0 ]; then
                         if [ -z $masterip ] || [ "$masterip" = "none" ]; then
                             infmsg "$ls  master ip not set - try to detect ip ..."
                             master=$(2>&1 /usr/bin/fsimaster name)
                             retc=$?
                             if [ $retc -ne 0 ]; then
                                errmsg "cannot detect master - abort"
                                retc=66
                             else
                                infmsg "$ls  master: $master"
                                debmsg "$ls  dns domain: $dnsdom"
                                if [ -z $dnsdom ]; then
                                     dnsmaster=$master
                                else
                                     dnsmaster=$master"."$dnsdom
                                fi
                                masterip=$(2>&1 /usr/bin/fsimaster ip $dnsmaster)
                                retc=$?
                                if [ $retc -ne 0 ]; then
                                     warnmsg "$ls  cannot get master ip - try without check of all member already online"
                                else
                                     debmsg "$ls  master ip: $masterip"
                                fi
                             fi
                         else
                             debmsg "$ls  master ip: $masterip"
                         fi                  
                     fi
      
                     if [ -z masterip ]; then
                        warnmsg "$ls  cannot detect master - try without check of all member already online"
                     else
                        infmsg "$ls  call command remote on master"
                        xecommand="ssh $g_ssh_options $masterip xe"
                        infmsg "$ls  get uuid from host"
                        memberlist=$($xecommand host-list params=name-label --minimal)
                        
                        if [ -z memberlist ]; then
                           warnmsg "$ls  cannot get member list - try without check of all member already online"
                        else
                           backIFS=$IFS;
                           IFS=",";
                           memberlist_a=($memberlist);
                           IFS=$backIFS;
                           allon=0
                           until (( $allon )); do
                              allon=1
                              for ((i=0; i<${#memberlist_a[@]}; ++i)); do     
                                 debmsg "$ls  Test if server [${memberlist_a[$i]}] online"
                                 ping ${memberlist_a[$i]} -c 1  >/dev/nul 2>&1
                                 online=$?
                                 if [ $online -eq 0 ]; then
                                    debmsg "$ls   srv: ${memberlist_a[$i]} - online"
                                 elif [ $online -eq 1 ] || [ $online -eq 2 ]; then
                                    tracemsg "$ls   srv: ${memberlist_a[$i]} - offline/unknown, try with $dnsdom "
                                    ping ${memberlist_a[$i]}.$dnsdom -c 1  >/dev/nul 2>&1
                                    online=$?
                                    if [ $online -eq 0 ]; then
                                       debmsg "$ls   srv: ${memberlist_a[$i]} - online"
                                    elif [ $online -eq 1 ]; then
                                       warnmsg "$ls   srv: ${memberlist_a[$i]} - offline"
                                       sleep 10
                                       allon=0
                                    elif [ $online -eq 2 ]; then
                                       tracemsg "$ls   srv [${memberlist_a[$i]}]/[${memberlist_a[$i]}.$$dnsdom] - unknown server"
                                    else
                                       tracemsg "$ls  unknown error rc=$online"
                                    fi
                                 else
                                    tracemsg "$ls  srv [${memberlist_a[$i]}] - unknown error rc=$online"
                                 fi
                              done   
                           done
                        fi
                     fi
                  else
                     infmsg "$ls  already in pool - do not need to wait for join pool"
                  fi
                  infmsg "$ls  Alone - go on ..."
               fi
           elif [ "$what" == "remove" ]; then
               if [ -d $flag_poolrun ]; then
                   infmsg "$ls  remove pool run flag dir"
                   if [ -f $hostflag ]; then
                     read createdhost < $hostflag
                     if [ $? -ne 0 ]; then
                       warnmsg "$ls  cannot read server - cannot delete"
                     else
                       if [ $createdhost == $HOSTNAME ] ; then
                         # OUTPUT=$(2>&1 rmdir $flag_poolrun)
                         OUTPUT=$(2>&1 rm -fr $flag_poolrun)
                         if [ $? -ne 0 ] ; then
                             errmsg "cannot delete pool run flag dir $flag_poolrun - [$OUTPUT] abort"
                             retc=45
                         else
                             infmsg "$ls  removed"
                         fi 
                       else
                         warnmsg "$ls  Host created flag: $createdhost"
                         warnmsg "$ls  Hostname: $HOSTNAME"
                         warnmsg "$ls  Not the same server - cannot remove flag"
                       fi
                     fi
                   else
                     warnmsg "no hostflag file exist - cannot delete"
                   fi
                   
               else
                   infmsg "$ls  no pool run flag dir exist"
               fi    
           else
               errmsg "unknown parameter"
               exit 99
           fi
       else
           errmsg "cannot connect to $flag_pool"
           retc=99
       fi
   fi
fi

SCRIPTEND=$(date +%s.%N)
runningtime=$(echo "$SCRIPTEND - $SCRIPTSTART" | bc)
infmsg "$ls End $progname rc=$retc run=$runningtime"
exit $retc


