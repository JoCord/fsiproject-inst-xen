#!/bin/sh
#
#   vimount.sh - mount fsi server
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
flag_pool="none"
fsisrv="none"
xenmp="none"
kspath="none"
job=""

ver="1.0.6 - 7.12.2016"
retc=0
ls="  "
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
while [ -h "$SOURCE" ]; do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
if [ -z $fsifunc ]; then export fsifunc="/usr/bin/fsifunc.sh"; fi
if [ -f $fsifunc ]; then
   . $fsifunc
   . $fsivars
else
   echo "ERROR cannot load fsi functions $fsifunc"
   exit 99
fi
if [ -z $logfile ]; then logfile=$fsidir"/"$progname".log"; fi



help() {
   echo
   echo " Help for $progname - $ver"    
   echo
   echo " mount/umount or check fsi deploy server mount"
   echo
   echo "  Parameter:"
   echo "   -c                 check if deploy server mounted"
   echo "   -m                 mount deploy server"
   echo "   -u                 umount deploy server"
   echo
   echo "  Optional Parameter:"
   echo "   -i                 sub level output"
   echo "   -q                 quiet mode"
   echo "   -0                 info mode"
   echo "   -1                 debug mode"
   echo "   -2                 trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   echo "  Return Code:"
   echo "    1 = help"
   echo "    2 = no pool "
   echo "    > = different meaning"
   echo
   echo "  Example:"
   echo "    $progname -n"
   echo
}


while getopts ":cmul:ihq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         # debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "i")
         ls="     "
        ;;
      "c")
         job="check"
        ;;
      "m")
         job="mount"
        ;;
      "u")
         job="umount"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done


# main ------------------------------------------------------------------------------------------------------------------------------------


if [ "$job" == "" ]; then
   help
   exit 1
fi

infmsg "$ls VI Mount v.$ver"
   
if [ $retc -eq 0 ] && [ "$flag_pool" == "none" ] ; then
    errmsg "no pool flag dir given in config"
    retc=99
else
    debmsg "$ls  flag: $flag_pool"
fi

if [ ! -d $kspath ]; then
   infmsg "$ls  $kspath does not exist - create"
   output=$(mkdir -p $kspath)
   retc=$?
   if [ $retc -ne 0 ]; then
      errmsg "cannot create $kspath - abort"
   fi
fi

script="$kspath/customize.sh"

if [ $retc -eq 0 ]; then
   if [ "$job" == "check" ]; then
     infmsg "$ls  check if fsi srv mounted"
     if [ -d $flag_pool ]; then
       infmsg "$ls  fsi server mounted and pool dir exist"
     else
       debmsg "$ls  no pool dir exist - test if setup script exist"
       if [ -e $script ]; then
         infmsg "$ls  script exist - mount ok"
       else
         infmsg "$ls  fsi server or pool dir not exist - not mounted"
         retc=1
       fi
     fi
   elif [ "$job" == "mount" ]; then
     infmsg "$ls  Already mounted ?"
     if [ -d $flag_pool ]; then
       infmsg "$ls  => yes - fsi server already mounted and pool dir exist"
     elif [ -e $script ]; then
       infmsg "$ls  => yes - fsi server ks dir mounted no pool - maybe standalone config"
     else
       infmsg "$ls  => no - mount fsi server"
       if [ "$kspath" == "none" ]; then
         errmsg "no ks path found - abort"
         retc=99
       else
         debmsg "$ls  ==> local point: $kspath"
       fi
       
       if [ $retc -eq 0 ] && [ "$fsisrv" == "none" ] ; then
         errmsg "no fsi server found"
         retc=9
       else
         debmsg "$ls  ==> fsisrv: $fsisrv"
       fi
       
       if [ $retc -eq 0 ] && [ "$xenmp" == "none" ] ; then
         errmsg "no vi xen mount point found"
         retc=9
       else
         debmsg "$ls  ==> mount point: $xenmp"
       fi
   
       
       if [ $retc -eq 0 ] ; then
         debmsg "$ls  mount fsi srv now ..."
         OUTPUT=$(2>&1 mount -t nfs $fsisrv":"$xenmp $kspath)
         if [ $? -ne 0 ] ; then
           errmsg "cannot mount fsi server - [$OUTPUT] abort"
           retc=99
         else
           infmsg "$ls  mount ok - check pool"
           if [ -d $flag_pool ]; then
             infmsg "$ls  fsi server mounted and pool dir exist"
           else
             warnmsg "$ls  fsi server or pool dir not exist"
             retc=99
           fi
         fi
       fi    
     fi
   elif [ "$job" == "umount" ]; then
     infmsg "$ls  umount fsi server"
     OUTPUT=$(2>&1 umount $kspath)
     if [ $? -ne 0 ] ; then
       errmsg "cannot unmount fsi server - [$OUTPUT] abort"
       retc=99
     else
       infmsg "$ls  unmount ok"
     fi  
   else
     errmsg "don´t know what to do [$job]"
   fi
fi

debmsg "$ls end routine rc=$retc"
exit $retc


