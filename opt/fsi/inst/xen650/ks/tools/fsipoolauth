#!/bin/sh
#
#   vipoolauth.sh - set pool auth
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
pool="none"
insttyp="none"
timeout=30
unmount=0
job=""
authtyp=""

ver="1.0.8 - 02.02.2017"
retc=0
ls=" "
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
while [ -h "$SOURCE" ]; do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
if [ -z $fsifunc ]; then export fsifunc="/usr/bin/fsifunc.sh"; fi
if [ -f $fsifunc ]; then
   . $fsifunc
   . $fsivars
else
   echo "ERROR cannot load fsi functions $fsifunc"
   exit 99
fi
if [ -z $logfile ]; then logfile=$fsidir"/"$progname".log"; fi

help() {
   echo
   echo " Help for $progname - $ver"    
   echo
   echo " set or check pool authentication"
   echo
   echo "  Parameter:"
   echo "   -c <ad/loc>        check if local or ad auth set"
   echo "   -s <ad/loc>        set local or ad auth"
   echo
   echo "  Optional Parameter:"
   echo "   -i                 sub level output"
   echo "   -q                 quiet mode"
   echo "   -0                 info mode"
   echo "   -1                 debug mode"
   echo "   -2                 trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   echo "  Return Code:"
   echo "    1 = help"
   echo "    2 = no pool "
   echo "    > = different meaning"
   echo
   echo "  Example:"
   echo "    $progname -n"
   echo
}


while getopts ":c:s:l:ihq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         # debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "i")
         ls="     "
        ;;
      "c")
         export authtyp="$OPTARG"
         job="check"
        ;;
      "s")
         export authtyp="$OPTARG"
         job="set"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done


# main ------------------------------------------------------------------------------------------------------------------------------------

function check_ad() {
    local rc=0
    out=`$xecommand host-param-list uuid=$uuidmaster |grep external-auth-type | awk '{print $4}' `
    debmsg "$ls   auth typ: $out"
    authtyp="ok-"$out
    
    out=`$xecommand host-param-list uuid=$uuidmaster |grep external-auth-configuration | awk '{print $4}' `
    debmsg "$ls   auth conf: $out"
    authconf="ok-"$out
    
    out=`$xecommand host-param-list uuid=$uuidmaster |grep external-auth-service-name | awk '{print $4}' `
    debmsg "$ls   auth serv: $out"
    authserv="ok-"$out
    
    if [ "$authtyp" == "ok-AD" ] && [ "$authconf" != "ok-" ] && [ "$authserv" != "ok-" ] ; then
      infmsg "$ls   pool successful set to local auth" 
      debmsg "$ls   typ: $authtyp"
      debmsg "$ls   config: $authconf"
      debmsg "$ls   service: $authserv"
    else
      warnmsg "$ls   pool auth not configure to local"
      debmsg "$ls   typ: $authtyp"
      debmsg "$ls   config: $authconf"
      debmsg "$ls   service: $authserv"
      rc=1
    fi
    return $rc
}


function check_loc() {
    local rc=0
    out=`$xecommand host-param-list uuid=$uuidmaster |grep external-auth-type | awk '{print $4}' `
    debmsg "$ls   auth typ: $out"
    authtyp="ok-"$out
    
    out=`$xecommand host-param-list uuid=$uuidmaster |grep external-auth-configuration | awk '{print $4}' `
    debmsg "$ls   auth conf: $out"
    authconf="ok-"$out
    
    out=`$xecommand host-param-list uuid=$uuidmaster |grep external-auth-service-name | awk '{print $4}' `
    debmsg "$ls   auth serv: $out"
    authserv="ok-"$out
    
    if [ "$authtyp" == "ok-" ] && [ "$authconf" == "ok-" ] && [ "$authserv" == "ok-" ] ; then
      infmsg "$ls   pool successful set to local auth" 
    else
      warnmsg "$ls   pool auth not configure to local"
      debmsg "$ls   typ: $authtyp"
      debmsg "$ls   config: $authconf"
      debmsg "$ls   service: $authserv"
      rc=1
    fi
    return $rc
}

function set_ad() {
   local rc=0
   local sysconf="/usr/bin/fsijoinad"
    
   debmsg "$ls   search for domain join script"
   debmsg "$ls   script: $sysconf"
   if [ -f $sysconf ] ; then
        debmsg "$ls   found script - run it"
        /usr/bin/perl $sysconf --sub --mode master
        rc=$?
        if [ $rc -eq 0 ]; then
            infmsg "$ls   joining domain successful end"
        else
            errmsg "joining domain - abort $rc"
        fi      
   else
     errmsg "cannot find domain join script - abort"
     rc=99
   fi

   return $rc
}

function set_loc() {
   local rc=0
   local maxloop=10
   local counter=0
   local waittime=20
   
   infmsg "$ls   try to disable external auth"
   while [ $counter -lt $maxloop ]; do 
      debmsg "$ls   count: $counter"

      debmsg "$ls    cmd: $xecommand pool-disable-external-auth"
      OUTPUT=$(2>&1 $xecommand pool-disable-external-auth)
      tracemsg "$ls    cmd output: [$OUTPUT]"
      rc=$?
      if [ $rc -ne 0 ]; then
          errmsg "cannot disable pool auth command rc=$rc - [$OUTPUT] - abort"
          counter=$maxloop
      else
          infmsg "$ls   pool disable command successful - analyze return message"
          if [[ "$OUTPUT" =~ ".*failed to disable.*" ]]; then
             # [The pool failed to disable the external authentication of at least one host.
             # host: 132bf420-b4f8-4204-89b6-b1a36c0232af (aisxendeploy03)
             warnmsg "$ls    some server cannot disable auth - wait [$waittime] and retry"
             sleep $waittime       
          else
             infmsg "$ls   pool auth disabled successful"
             counter=$maxloop
          fi
      fi
      counter=$((counter+1))
   done
   
   if [ $rc -eq 0 ]; then
     infmsg "$ls   disable ok"
   else
     errmsg "cannot disable external auth - abort"
   fi
   
   return $rc
}


# main ------------------------------------------------------------------------------------------------------------------------------------

if [ "$job" == "" ] || [ "$authtyp" == "" ]; then
   help
   exit 1
fi

infmsg "$ls Pool Auth v.$ver"


if [ $retc -eq 0 ]; then
   /usr/bin/fsimount $quietmode -c -i
   retc=$?
   if [ $retc -ne 0 ] ; then
      infmsg "$ls  fsi deploy server not mounted - try to mount ..."
      tracemsg "$ls  call fsimount mount"
      /usr/bin/fsimount $quietmode -m -i
      retc=$?
      if [ $retc -ne 0 ] ; then
         errmsg "cannot mount fsi deploy server - abort"
         retc=99
      else
        infmsg "$ls  fsi deploy server mounted now!"
        unmount=1
      fi      
   else
     infmsg "$ls  fsi deploy server mounted"
  fi  
fi

if [ $retc -eq 0 ]; then
    if [ -z $masterip ] || [ "$masterip" = "none" ]; then
        infmsg "$ls  master ip not set - try to detect ip ..."
        master=$(2>&1 /usr/bin/fsimaster name)
        retc=$?
        if [ $retc -ne 0 ]; then
           errmsg "cannot detect master - abort"
           retc=66
        else
           infmsg "$ls  master: $master"
           debmsg "$ls  dns domain: $dnsdom"
           if [ -z $dnsdom ]; then
                dnsmaster=$master
           else
                dnsmaster=$master"."$dnsdom
           fi
           masterip=$(2>&1 /usr/bin/fsimaster ip $dnsmaster)
           retc=$?
           if [ $retc -ne 0 ]; then
                errmsg "cannot detect master ip - abort"
                retc=67
           else
                infmsg "$ls  master ip: $masterip"
           fi
        fi
    else
        debmsg "$ls  master ip: $masterip"
    fi                  
fi

if [ $retc -eq 0 ]; then
  if [ "$insttyp" == "master" ]; then
      infmsg "$ls  call command local"
      xecommand="xe"
      export uuidmaster=$HOSTuuid
  else
      infmsg "$ls  call command remote on master"
      xecommand="ssh $g_ssh_options $masterip xe"
      infmsg "$ls  get uuid from host"
      export uuidmaster=`$xecommand host-list name-label=$master --minimal`
  fi 
fi

if [ $retc -eq 0 ]; then
   debmsg "$ls   ==> pool master: $master"
   debmsg "$ls   ==> pool master ip: $masterip"
   tracemsg "$ls     cmd: $xecommand"
   if [ "$job" == "set" ]; then
      check_all_srv_on $xecommand
      allon=$?
      if (($allon)); then
         if [ "$authtyp" == "ad" ] ; then
            infmsg "$ls  set pool auth to ad"
            set_ad
            actauth=$?
            tracemsg "$ls   => set_ad rc: [$actauth]"
            if [ $actauth -eq 0 ]; then
               check_ad
               actauth=$?
               tracemsg "$ls   => check_ad rc: [$actauth]"
               if [ $actauth -eq 0 ]; then
                  infmsg "$ls  pool in ad"
               elif [ $actauth -eq 1 ]; then
                  warnmsg "$ls  pool not in ad"
                  retc=1
               fi
            else
               errmsg "$ls  cannot join pool in ad"
               retc=66
            fi
         elif [ "$authtyp" == "loc" ]; then
           infmsg "$ls  set pool auth to local"
           debmsg "$ls  run set loc now ..."
           set_loc
           actauth=$?
           tracemsg "$ls   => set_loc rc: [$actauth]"
           if [ $actauth -eq 0 ]; then
              debmsg "$ls  run check_loc now .."
              check_loc
              actauth=$?
              tracemsg "$ls   => check_loc rc: [$actauth]"
              debmsg "$ls  ret code= [$actauth]"
              if [ $actauth -eq 0 ]; then
                 infmsg "$ls  pool auth to local"
              elif [ $actauth -eq 1 ]; then 
                 warnmsg "$ls  pool auth not to local"
                 retc=1
              fi
           else
             errmsg "cannot set pool auth to local"
             retc=67
           fi
         else
            errmsg "unknown set parameter for auth [$authtyp]"
            help
            retc=65
         fi     
      else
        errmsg "not all server in pool online - abort"
        retc=99
      fi  
      
   elif [ "$job" == "check" ]; then
     if [ "$authtyp" == "ad" ]; then
       infmsg "$ls  check if pool in ad"
       check_ad
       actauth=$?
       tracemsg "$ls   => check_ad rc: [$actauth]"
       if [ $actauth -eq 0 ]; then
         infmsg "$ls  pool in ad"
       elif [ $actauth -eq 1 ]; then
          warnmsg "$ls  pool not in ad"
         retc=1
       else
         errmsg "$ls  something wrong during check pool ad auth"
         retc=$actauth
       fi
     elif [ "$authtyp" == "loc" ]; then
       infmsg "$ls  check if pool local auth"
       check_loc
       actauth=$?
       tracemsg "$ls   => check_loc rc: [$actauth]"
       if [ $actauth -eq 0 ]; then
         infmsg "$ls  pool auth to local"
       elif [ $actauth -eq 1 ]; then 
         warnmsg "$ls  pool auth not to local"
         retc=1
       else
         errmsg "$ls  something wrong during check pool loc auth"
         retc=$actauth
       fi
     else
       errmsg "unknown check flag [$authtyp]"
       help
       retc=98
     fi  
   else
       errmsg "unknown auth command (set/check) - [$job]"
       help
       retc=64
   fi
fi

tracemsg "$ls  rc=$retc"
if [ $unmount -ne 0 ]; then
  infmsg "$ls  unmount fsi deploy server now ..."
  /usr/bin/fsimount $quietmode -u -i
  unmountretc=$?
  if [ $unmountretc -ne 0 ]; then
    errmsg "cannot unmount fsi deploy server - abort"
    retc=99
  else
    infmsg "$ls  fsi deploy server unmounted now!"
    #unmount=1
  fi
fi 
    
    
debmsg "$ls End routine rc=$retc"
exit $retc
